<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>#Dada on NurKoGD</title>
        <link>https://GAODUAN11.github.io/tags/%23dada/</link>
        <description>Recent content in #Dada on NurKoGD</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>G端-NurKoGD</copyright>
        <lastBuildDate>Sun, 01 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://GAODUAN11.github.io/tags/%23dada/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GD</title>
        <link>https://GAODUAN11.github.io/p/gd/</link>
        <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://GAODUAN11.github.io/p/gd/</guid>
        <description>&lt;p&gt;CPU 的地址线和数据线宽度与 “每个地址对应的数据位数” 的关系，需要结合计算机的&lt;strong&gt;编址方式&lt;/strong&gt;（按字节或按字）来分析。以下是详细解答：&lt;/p&gt;
&lt;h3 id=&#34;一关键概念区分&#34;&gt;&lt;strong&gt;一、关键概念区分&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;地址线的作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址线数量（如 20 根）决定了 CPU 可寻址的&lt;strong&gt;存储单元数量&lt;/strong&gt;，公式为：$\( \text{存储单元数} = 2^{\text{地址线数}} \)。$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储单元的大小&lt;/strong&gt;（即每个地址对应的数据位数）由&lt;strong&gt;编址方式&lt;/strong&gt;决定，&lt;strong&gt;与数据线宽度无直接关联&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;数据线的作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据线宽度（如 16 位）表示 CPU 一次能读写的数据量（即位宽），但不决定 “每个地址对应的数据位数”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：16 位数据线可一次读写 2 字节（16 位），但这 2 字节可能对应&lt;strong&gt;一个字地址&lt;/strong&gt;（按字编址）或&lt;strong&gt;两个字节地址&lt;/strong&gt;（按字节编址）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二按字节编址现代计算机主流方式&#34;&gt;&lt;strong&gt;二、按字节编址（现代计算机主流方式）&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-每个地址对应-1-字节8-位&#34;&gt;&lt;strong&gt;1. 每个地址对应 1 字节（8 位）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;字节编址&lt;/strong&gt;下，&lt;strong&gt;每个地址对应 8 位数据&lt;/strong&gt;（1 字节）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：地址0x0000对应第 1 字节（8 位），0x0001对应第 2 字节（下一个 8 位），以此类推。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-20-根地址线的地址空间&#34;&gt;&lt;strong&gt;2. 20 根地址线的地址空间&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可寻址的字节单元数：$\( 2^{20} = 1\,048\,576 \, \text{字节} = 1 \, \text{MB} \)$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总存储容量：$\( 1 \, \text{MB} \times 8 \, \text{位} = 8 \, \text{M位} \)（或直接用字节表示为 1 MB）。$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-16-位数据线的含义&#34;&gt;&lt;strong&gt;3. 16 位数据线的含义&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 一次可读写&lt;strong&gt;2 字节（16 位）数据&lt;/strong&gt;，但需通过&lt;strong&gt;两个连续的字节地址&lt;/strong&gt;完成：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：读取 16 位数据时，CPU 访问地址0x0000（低 8 位）和0x0001（高 8 位），组合成 16 位数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，&lt;strong&gt;一个地址仍对应 8 位数据&lt;/strong&gt;，数据线宽度仅影响数据传输的效率（一次传 2 字节而非 1 字节）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三按字编址理论或特定架构&#34;&gt;&lt;strong&gt;三、按字编址（理论或特定架构）&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-假设字长--16-位1-字--16-位--2-字节&#34;&gt;&lt;strong&gt;1. 假设字长 = 16 位（1 字 = 16 位 = 2 字节）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;字编址&lt;/strong&gt;下，&lt;strong&gt;每个地址对应 1 个字（16 位数据）&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如：地址0x0000对应第 1 字（16 位），0x0001对应第 2 字（下一个 16 位），地址间隔为 2 字节（因 1 字占 2 字节）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-20-根地址线的地址空间-1&#34;&gt;&lt;strong&gt;2. 20 根地址线的地址空间&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可寻址的字单元数：$\( 2^{20} = 1\,048\,576 \, \text{字} = 1 \, \text{M字} \)$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总存储容量：$\( 1 \, \text{M字} \times 16 \, \text{位} = 16 \, \text{M位} = 2 \, \text{MB} \)$（因 1 字 = 2 字节）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-16-位数据线的匹配性&#34;&gt;&lt;strong&gt;3. 16 位数据线的匹配性&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据线宽度（16 位）与字长（16 位）完全匹配，CPU 可通过&lt;strong&gt;一个字地址&lt;/strong&gt;直接读写 16 位数据，无需访问多个地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时，&lt;strong&gt;一个地址对应 16 位数据&lt;/strong&gt;，但这是基于 “按字编址且字长 = 16 位” 的前提。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四结论是否一个地址对应-16-位数据&#34;&gt;&lt;strong&gt;四、结论：是否一个地址对应 16 位数据？&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;编址方式&lt;/td&gt;
          &lt;td&gt;每个地址对应的数据位数&lt;/td&gt;
          &lt;td&gt;20 根地址线 + 16 位数据线的含义&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;按字节编址&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;8 位（1 字节）&lt;/td&gt;
          &lt;td&gt;- 地址空间：1 MB（字节单元）- 16 位数据线：一次读写 2 字节（需两个地址）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;按字编址&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;16 位（1 字，假设字长 = 16 位）&lt;/td&gt;
          &lt;td&gt;- 地址空间：1 M 字（16 位单元）- 16 位数据线：一次读写 1 字（一个地址）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;核心结论&#34;&gt;&lt;strong&gt;核心结论&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在现代计算机（默认字节编址）中，一个地址对应 8 位数据&lt;/strong&gt;，16 位数据线用于高效传输 2 字节数据（需两个地址）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仅在按字编址且字长 = 16 位时，一个地址才对应 16 位数据&lt;/strong&gt;，但这种情况需特殊说明（如特定嵌入式架构）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见误区&#34;&gt;&lt;strong&gt;常见误区&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;用户容易将 “数据线宽度” 直接等同于 “每个地址对应的数据位数”，但实际上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址线决定&lt;strong&gt;存储单元数量&lt;/strong&gt;，编址方式决定&lt;strong&gt;存储单元大小&lt;/strong&gt;（位宽）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据线宽度决定&lt;strong&gt;一次传输的数据量&lt;/strong&gt;，与存储单元位宽可能匹配（如按字读写）或需组合多个单元（如按字节读写）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五举例说明&#34;&gt;&lt;strong&gt;五、举例说明&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按字节编址&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址0x0000：8 位数据（字节 1）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址0x0001：8 位数据（字节 2）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读取 16 位数据需访问0x0000和0x0001，组合为 16 位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按字编址（字长 16 位）&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址0x0000：16 位数据（字 1，占字节0x0000和0x0001）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址0x0001：16 位数据（字 2，占字节0x0002和0x0003）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读取 16 位数据只需访问0x0000一个地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;CPU 的地址线和数据线宽度不直接决定 “每个地址对应的数据位数”，核心取决于&lt;strong&gt;编址方式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字节编址&lt;/strong&gt;：每个地址对应 8 位（1 字节），16 位数据线需操作两个地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字编址&lt;/strong&gt;：每个地址对应字长位数（如 16 位），需明确字长且地址按字对齐。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，&lt;strong&gt;默认情况下（字节编址），一个地址对应 8 位数据，而非 16 位&lt;/strong&gt;。16 位数据线是 CPU 的传输能力，与存储单元的位宽无必然联系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question]
当 CPU 按字节寻址（逻辑上每个地址对应 1 字节），但存储器的物理存储单元为 16 位字长（即每个物理地址对应 2 字节）时，需要通过&lt;strong&gt;地址映射&lt;/strong&gt;和&lt;strong&gt;硬件逻辑&lt;/strong&gt;来协调两者的差异。以下是具体分析：&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;一核心矛盾逻辑编址与物理存储的差异&#34;&gt;&lt;strong&gt;一、核心矛盾：逻辑编址与物理存储的差异&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;关键问题&#34;&gt;&lt;strong&gt;关键问题&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;CPU 生成的是&lt;strong&gt;字节地址&lt;/strong&gt;（如 0x0000、0x0001），但存储器的物理单元以&lt;strong&gt;16 位字&lt;/strong&gt;为单位（每个字占 2 字节）。因此需要解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如何将字节地址映射到存储器的字地址？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何读写单字节数据（需访问半个字单元）？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何读写 16 位数据（需对齐或非对齐访问）？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二地址映射与存储结构&#34;&gt;&lt;strong&gt;二、地址映射与存储结构&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 有 20 根地址线（字节寻址范围：$2^{20} = 1 , \text{MB}$字节）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器物理上以 16 位字为单位编址（每个字占 2 字节），则：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储器的字地址数 = $1 , \text{MB} \div 2 , \text{字节/字} = 512 , \text{K字}，即物理地址线需 19 根(2^{19} = 512 , \text{K})。$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-字节地址到字地址的映射&#34;&gt;&lt;strong&gt;1. 字节地址到字地址的映射&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字地址计算&lt;/strong&gt;：字节地址 \(B\) 对应的字地址 \($W = B \div 2$\)（向下取整）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;字节偏移&lt;/strong&gt;：字节地址 \(B\) 在字单元中的位置：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 \(B\) 为偶数（\(B = 2W\)）：对应字单元的低 8 位（LSB）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 \(B\) 为奇数（\(B = 2W + 1\)）：对应字单元的高 8 位（MSB）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字节地址 0x0000 → 字地址 0x0000，低 8 位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字节地址 0x0001 → 字地址 0x0000，高 8 位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字节地址 0x0002 → 字地址 0x0001，低 8 位。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三数据读写操作分析&#34;&gt;&lt;strong&gt;三、数据读写操作分析&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-读取单字节数据8-位&#34;&gt;&lt;strong&gt;1. 读取单字节数据（8 位）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;情况 1：偶数字节地址（低 8 位）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：读取字节地址 0x0000（字地址 0x0000 的低 8 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作：访问字地址 0x0000，通过硬件逻辑提取低 8 位数据（屏蔽高 8 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;情况 2：奇数字节地址（高 8 位）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：读取字节地址 0x0001（字地址 0x0000 的高 8 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作：访问字地址 0x0000，提取高 8 位数据（右移 8 位或屏蔽低 8 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-读取-16-位数据字&#34;&gt;&lt;strong&gt;2. 读取 16 位数据（字）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对齐访问（偶数字节地址起始）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：读取字节地址 0x0000~0x0001（对应字地址 0x0000 的 16 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作：直接访问字地址 0x0000，一次读取 16 位数据，无需拆分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非对齐访问（奇数字节地址起始）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：读取字节地址 0x0001~0x0002（对应字地址 0x0000 的高 8 位和字地址 0x0001 的低 8 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问字地址 0x0000，提取高 8 位（0x0001 的数据）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问字地址 0x0001，提取低 8 位（0x0002 的数据）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件将两部分拼接为 16 位数据（高 8 位在前，低 8 位在后）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：非对齐访问可能需要额外时钟周期，且并非所有架构都支持（如早期 ARM 需对齐访问）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四存储器的硬件实现&#34;&gt;&lt;strong&gt;四、存储器的硬件实现&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;为支持字节寻址与 16 位字存储的兼容，存储器需具备以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;字节使能信号（Byte Enable）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个字单元配备 2 个字节使能信号（BE0、BE1），分别控制低 8 位和高 8 位的读写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例：读取字节地址 0x0001 时，使能 BE1（高 8 位），屏蔽 BE0（低 8 位）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;数据总线宽度与拆分逻辑&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据线宽度为 16 位，与字单元位宽匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单字节读写时，通过字节使能信号和数据掩码（Mask）提取 / 写入目标字节，另一字节保持不变。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;地址译码逻辑&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将 CPU 的字节地址转换为存储器的字地址和字节偏移（通过地址线的最低位 A0 判断奇偶：A0=0→低字节，A0=1→高字节）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五存储容量与地址范围计算&#34;&gt;&lt;strong&gt;五、存储容量与地址范围计算&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-cpu-视角字节寻址&#34;&gt;&lt;strong&gt;1. CPU 视角（字节寻址）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址范围：\($0 \sim 2^{20} - 1$\)（共 1 MB 字节地址）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总存储容量：\($1 \, \text{MB} \times 8 \, \text{位} = 8 \, \text{M位} = 1 \, \text{MB}$\)（按字节计算）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-存储器视角16-位字编址&#34;&gt;&lt;strong&gt;2. 存储器视角（16 位字编址）&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字地址范围：\($0 \sim 2^{19} - 1$\)（共 512 K 字地址）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总存储容量：\($512 \, \text{K字} \times 16 \, \text{位} = 8 \, \text{M位} = 1 \, \text{MB}$\)（与 CPU 视角一致）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;六总结混合编址的关键结论&#34;&gt;&lt;strong&gt;六、总结：混合编址的关键结论&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;地址映射本质&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 的字节地址是&lt;strong&gt;逻辑地址&lt;/strong&gt;，存储器的字地址是&lt;strong&gt;物理地址&lt;/strong&gt;，两者通过地址线低位（A0）关联。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑地址空间（字节）与物理地址空间（字）的关系：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\($\text{逻辑地址数} = 2 \times \text{\(\text{逻辑地址数} = 2 \times \text{物理地址数}\)}$)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;数据访问效率&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对齐的 16 位访问（偶数字节起始）效率最高（一次访存）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单字节访问或非对齐 16 位访问需额外硬件处理，可能降低性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;兼容性设计&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;现代存储器通常支持字节使能，允许灵活访问不同位宽数据，屏蔽了物理存储单元与逻辑编址的差异。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一句话概括&lt;/strong&gt;：CPU 按字节寻址时，逻辑上每个地址对应 1 字节，但物理存储器以 16 位字为单元存储，需通过地址转换和字节使能逻辑实现兼容，本质是 “逻辑字节地址映射到物理字地址的某个字节”。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
